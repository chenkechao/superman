<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

    <description>Spring MVC配置文件</description>


    <!-- REST中根据URL后缀自动判定Content-Type及相应的View
         内置的内容协商策略和扩展名解析器，将request中的mediaType解析出来，并找到对应的后缀名，可以认为本来有2个作用
         1 通过request解析出对应的mediaType
         2 获取全部或者mediaType对应的后缀名
     -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="defaultContentType" value="application/json"/>
        <property name="mediaTypes">
            <value>
                json=application/json
                xml=application/xml
            </value>
        </property>
    </bean>

    <!--使用ConversionService及自定义转换器-->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.keke.superman.converter.DateConverter"/>
            </set>
        </property>
    </bean>

    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**/esb/**"/>
            <bean class="com.keke.superman.esb.interceptor.ESBMessageInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--content-negotiation-manager用来支持内容协商-->
    <!--conversion-service自定义转换器-->
    <mvc:annotation-driven  conversion-service="conversionService" content-negotiation-manager="contentNegotiationManager">

        <mvc:message-converters>
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>

            <!--设置JSON转换器-->
            <!--
                resource  requestTransfomr
                对JSON格式的处理，其中默认的defaultMessageConverter配置为原先系统的JSON处理，同时路径配置为/
                对ESB发送过来的消息处理，路径自定义，以下给个例子为：/**/esb/**
            -->
            <bean class="com.keke.superman.esb.converter.JSONMessageConverter">
                <property name="converterPathMap">
                    <map>
                        <entry key-ref="defaultMessageConverter">
                            <list>
                                <value>/</value>
                            </list>
                        </entry>
                        <entry key-ref="esbMessageConverter">
                            <list>
                                <value>/**/esb/**</value>
                            </list>
                        </entry>
                    </map>
                </property>
            </bean>

        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 访问"/getUserName"时服务器发现找不到/WEB-INF/ftl/username.ftl，于是它就到这里来找了，结果自然是找到了 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--<bean id="gillionValidator" class="com.gfa4j.validation.validator.GillionValidator"/>-->

    <mvc:default-servlet-handler />

    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**/esb/**"/>
            <bean class="com.keke.superman.esb.interceptor.ESBMessageInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--
        <bean id="securityController" class="com.kxtx.business.controller.SecurityController"/>
    -->

    <!--配置国际化信息码：error.data.expired-->



    <!--esb begin -->
    <bean id="serverConfiguration" class="com.keke.superman.esb.configuration.SimpleServerConfiguration">
        <property name="providerSysId" value="hello" />
        <property name="serverPlugins">
            <list>
                <bean class="com.keke.superman.esb.plugins.transaction.TransactionServerPlugin"></bean>
            </list>
        </property>
        <!--<property name="returnExceptionStack" value="true"/>-->
    </bean>

    <!--ESB信息转换-->
    <bean id="esbMessageConverter" class="com.keke.superman.esb.converter.ESBMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
        <property name="objectMapper">
            <util:constant static-field="com.keke.superman.esb.util.JsonMapperHolder.objectMapper"></util:constant>
        </property>
        <property name="serverConfiguration" ref="serverConfiguration"></property>
    </bean>

    <bean id="defaultMessageConverter" class="com.keke.superman.converter.GillionJsonConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
        <property name="objectMapper">
            <util:constant static-field="com.keke.superman.esb.util.JsonMapperHolder.objectMapper"/>
        </property>
    </bean>

    <bean class="com.keke.superman.validation.web.advice.ValidationErrorHandler">
    </bean>

    <bean name="exceptionConfiguration" class="com.keke.superman.esb.exception.ESBServerExceptionConfiguration">
        <property name="exceptionServiceCode" value="exception-loader"/>
    </bean>



    <bean id="exceptionResolver" class="com.keke.superman.esb.exception.MultiHandlerExceptionResolver">
        <property name="resolverMap">
            <map>
                <entry>
                    <key>
                        <bean class="com.keke.superman.exception.GillionHandlerExceptionResolver">
                        </bean>
                    </key>
                    <list>
                        <value>/</value>
                    </list>
                </entry>
                <entry>
                    <key>
                        <bean id="esbExceptionResolver" class="com.keke.superman.esb.exception.ESBHandlerExceptionResolver">
                            <property name="exceptionConfiguration" ref="exceptionConfiguration" />
                            <property name="serverConfiguration" ref="serverConfiguration" />
                        </bean>
                    </key>
                    <list>
                        <value>/**/esb/**</value>
                    </list>
                </entry>
            </map>
        </property>
    </bean>
    <bean id="gridLayoutController" class="com.keke.superman.datagrid.layout.controller.GridLayoutController"/>
    <bean class="com.keke.superman.esb.util.ESBContextHolder"/>
   <!-- <bean name="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="validationMessageSource" ref="i18nMessageSource"/>
    </bean>-->

    <bean id="validationController" class="com.keke.superman.controller.ValidationController"/>


</beans>